@model IEnumerable<ManagmentApplication.Models.Proyecto>

<div class="carousel-container">
    <div class="carousel-wrapper">
        <button id="prevButton" aria-label="Previous image" class="carousel-nav-btn carousel-nav-btn-prev">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="15 18 9 12 15 6"></polyline>
            </svg>
        </button>

        <div class="carousel-image-container">
            <img id="carouselImage"
                 src="@Model.FirstOrDefault()?.ImagenUrl"
                 alt="Project image"
                 class="carousel-image"
                 onerror="this.src='/path/to/default-image.jpg'; this.alt='Default image';" />
        </div>

        <button id="nextButton" aria-label="Next image" class="carousel-nav-btn carousel-nav-btn-next">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
        </button>
    </div>

    <div class="carousel-indicators">
        @for (int i = 0; i < Model.Count(); i++)
        {
            <button class="carousel-indicator @(i == 0 ? "active" : "")"
                    data-index="@i"
                    aria-label="Go to image @(i + 1)">
            </button>
        }
    </div>
</div>

<style>
    .carousel-container {
        width: 100%;
        max-width: 250px; /* Smaller, fixed width */
        margin: 1rem auto;
        position: relative;
        user-select: none;
    }

    .carousel-wrapper {
        position: relative;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease;
    }

        .carousel-wrapper:hover {
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
        }

    .carousel-image-container {
        position: relative;
        width: 100%;
        padding-top: 75%; /* 4:3 aspect ratio */
    }

    .carousel-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.5s ease, opacity 0.5s ease;
    }

    .carousel-nav-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(0, 0, 0, 0.3);
        color: white;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        z-index: 10;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        padding: 0;
    }

        .carousel-nav-btn svg {
            width: 18px;
            height: 18px;
        }

        .carousel-nav-btn:hover {
            background: rgba(0, 0, 0, 0.5);
            transform: translateY(-50%) scale(1.1);
        }

    .carousel-nav-btn-prev {
        left: 5px;
    }

    .carousel-nav-btn-next {
        right: 5px;
    }

    .carousel-indicators {
        display: flex;
        justify-content: center;
        margin-top: 10px;
    }

    .carousel-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: rgba(0, 0, 0, 0.3);
        margin: 0 4px;
        border: none;
        cursor: pointer;
        transition: background 0.3s ease;
    }

        .carousel-indicator.active {
            background: #007bff;
        }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const proyectos = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(p => p.ImagenUrl)));
        const imageElement = document.getElementById("carouselImage");
        const prevButton = document.getElementById("prevButton");
        const nextButton = document.getElementById("nextButton");
        const indicators = document.querySelectorAll('.carousel-indicator');
        let currentIndex = 0;

        function updateIndicators() {
            indicators.forEach((indicator, index) => {
                indicator.classList.toggle('active', index === currentIndex);
            });
        }

        function showImage(index) {
            currentIndex = (index + proyectos.length) % proyectos.length;

            // Fade out effect
            imageElement.style.opacity = 0;

            setTimeout(() => {
                imageElement.src = proyectos[currentIndex];
                imageElement.style.opacity = 1;
                updateIndicators();
            }, 500);
        }

        // Navigation buttons
        prevButton.addEventListener("click", () => showImage(currentIndex - 1));
        nextButton.addEventListener("click", () => showImage(currentIndex + 1));

        // Indicator clicks
        indicators.forEach(indicator => {
            indicator.addEventListener('click', () => {
                const index = parseInt(indicator.dataset.index);
                showImage(index);
            });
        });

        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') showImage(currentIndex - 1);
            if (e.key === 'ArrowRight') showImage(currentIndex + 1);
        });
    });
</script>